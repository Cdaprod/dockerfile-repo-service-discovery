name: Service Screenshot & Documentation

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to screenshot'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - staging
          - production
      force_refresh:
        description: 'Force refresh all screenshots'
        required: false
        type: boolean
        default: false
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.github/workflows/screenshot.yml'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.github/workflows/screenshot.yml'

env:
  NODE_VERSION: '20'
  SCREENSHOT_DIR: 'public/assets/screenshots'
  CACHE_KEY_PREFIX: 'v1'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      cache-hit: ${{ steps.npm-cache.outputs.cache-hit }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/ms-playwright
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm ci
          npx playwright install chromium
          
      - name: Discover services
        id: discover
        run: |
          # Start services if needed for discovery
          docker compose up -d
          
          # Run service discovery and output JSON
          node -e '
          const { ServiceDiscovery } = require("./src/service-discovery");
          async function discover() {
            const discovery = new ServiceDiscovery();
            const services = await discovery.discoverServices();
            console.log(JSON.stringify({include: services}));
          }
          discover();
          ' > matrix.json
          
          # Set matrix output
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT
          
          # Cleanup
          docker compose down
          
      - name: Set matrix
        id: set-matrix
        run: |
          # Ensure we have valid JSON even if discovery fails
          if [ -f matrix.json ] && [ -s matrix.json ]; then
            echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"include\":[{\"name\":\"default\",\"url\":\"http://localhost:3000\"}]}" >> $GITHUB_OUTPUT
          fi

  screenshot:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
      fail-fast: false
      max-parallel: 3
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/ms-playwright
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Create screenshots directory
        run: mkdir -p ${{ env.SCREENSHOT_DIR }}
          
      - name: Start service
        run: |
          echo "Starting service: ${{ matrix.name }}"
          docker compose up -d ${{ matrix.name }}
          
      - name: Wait for service
        run: |
          timeout=300
          start_time=$(date +%s)
          
          until curl -s -o /dev/null -w '%{http_code}' ${{ matrix.url }} | grep -q '200\|301\|302'; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            
            if [ $elapsed -ge $timeout ]; then
              echo "Service failed to start within ${timeout} seconds"
              exit 1
            fi
            
            echo "Waiting for service to be ready... ($elapsed seconds)"
            sleep 5
          done
          
          echo "Service is ready!"
          
      - name: Take screenshots
        env:
          SERVICE_URL: ${{ matrix.url }}
          SERVICE_NAME: ${{ matrix.name }}
          FORCE_REFRESH: ${{ inputs.force_refresh }}
        run: |
          node src/index.js
          
      - name: Generate metadata
        if: success()
        run: |
          echo "{
            \"service\": \"${{ matrix.name }}\",
            \"url\": \"${{ matrix.url }}\",
            \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
          }" > ${{ env.SCREENSHOT_DIR }}/${{ matrix.name }}-metadata.json
          
      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        with:
          name: screenshots-${{ matrix.name }}
          path: ${{ env.SCREENSHOT_DIR }}
          retention-days: 7
          
      - name: Stop service
        if: always()
        run: docker compose down ${{ matrix.name }}

  publish:
    needs: [screenshot]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Download all screenshots
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.SCREENSHOT_DIR }}
          
      - name: Reorganize artifacts
        run: |
          cd ${{ env.SCREENSHOT_DIR }}
          for dir in screenshots-*; do
            if [ -d "$dir" ]; then
              mv "$dir"/* ./
              rmdir "$dir"
            fi
          done
          
      - name: Generate index
        run: |
          echo "# Service Screenshots" > ${{ env.SCREENSHOT_DIR }}/index.md
          echo "Last updated: $(date -u)" >> ${{ env.SCREENSHOT_DIR }}/index.md
          echo "" >> ${{ env.SCREENSHOT_DIR }}/index.md
          
          for metadata in ${{ env.SCREENSHOT_DIR }}/*-metadata.json; do
            if [ -f "$metadata" ]; then
              service=$(jq -r '.service' "$metadata")
              url=$(jq -r '.url' "$metadata")
              echo "## $service" >> ${{ env.SCREENSHOT_DIR }}/index.md
              echo "- URL: $url" >> ${{ env.SCREENSHOT_DIR }}/index.md
              echo "- Updated: $(jq -r '.timestamp' "$metadata")" >> ${{ env.SCREENSHOT_DIR }}/index.md
              echo "" >> ${{ env.SCREENSHOT_DIR }}/index.md
            fi
          done
          
      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add ${{ env.SCREENSHOT_DIR }}
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update screenshots [skip ci]
            
            Automated screenshot update for:
            $(git diff --staged --name-only | grep -o '[^/]*$' | sed 's/-metadata.json//' | sort -u | sed 's/^/- /')"
            
            git push
          fi
          
  cleanup:
    needs: [screenshot]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const retention = 7 * 24 * 60 * 60 * 1000; // 7 days
            const now = new Date();
            
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              const created = new Date(artifact.created_at);
              if (now - created > retention) {
                console.log(`Deleting old artifact: ${artifact.name}`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }

  notify:
    needs: [screenshot, publish]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Check workflow status
        id: check
        run: |
          if [ "${{ needs.screenshot.result }}" = "success" ] && [ "${{ needs.publish.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
      - name: Notify success
        if: steps.check.outputs.status == 'success'
        run: |
          echo "::notice::Screenshots updated successfully!"
          
      - name: Notify failure
        if: steps.check.outputs.status == 'failure'
        run: |
          echo "::error::Screenshot workflow failed. Check the logs for details."