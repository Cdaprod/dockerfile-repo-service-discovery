name: 'Dockerfile Service Discovery & Screenshot'
description: 'Automatically discover services from Dockerfiles and capture screenshots across different viewports'
author: 'Cdaprod'

branding:
  icon: 'search'
  color: 'blue'

inputs:
  base-dir:
    description: 'Base directory to scan for Dockerfiles'
    required: false
    default: '.'
  
  screenshot-dir:
    description: 'Directory to store screenshots'
    required: false
    default: 'public/assets/screenshots'
  
  services:
    description: 'JSON string of services to scan (overrides automatic discovery)'
    required: false
  
  service-url:
    description: 'Single service URL to scan'
    required: false
  
  viewports:
    description: 'JSON array of viewport configurations'
    required: false
    default: '[{"width":1920,"height":1080,"name":"desktop"},{"width":768,"height":1024,"name":"tablet"},{"width":375,"height":812,"name":"mobile"}]'
  
  timeout:
    description: 'Timeout in milliseconds for service discovery'
    required: false
    default: '30000'
  
  wait-for-service:
    description: 'Time in seconds to wait for services to be ready'
    required: false
    default: '30'
  
  force-refresh:
    description: 'Force refresh all screenshots'
    required: false
    default: 'false'
  
  commit-screenshots:
    description: 'Whether to commit screenshots back to the repository'
    required: false
    default: 'false'
  
  generate-metadata:
    description: 'Generate metadata files for discovered services'
    required: false
    default: 'true'

outputs:
  services:
    description: 'JSON array of discovered services'
  
  screenshots:
    description: 'JSON array of generated screenshot paths'
  
  metadata-path:
    description: 'Path to the generated metadata file'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Cache dependencies
      id: npm-cache
      uses: actions/cache@v3
      with:
        path: |
          **/node_modules
          ~/.cache/ms-playwright
        key: v1-${{ runner.os }}-dockerfile-discovery-${{ hashFiles('package-lock.json') }}
        
    - name: Install dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        npm ci
        npx playwright install chromium
        
    - name: Create screenshots directory
      shell: bash
      run: mkdir -p ${{ inputs.screenshot-dir }}
        
    - name: Generate service discovery script
      shell: bash
      run: |
        cat > discover.js << 'EOL'
        const { ServiceDiscovery } = require('./src/service-discovery');
        
        async function discover() {
          const discovery = new ServiceDiscovery({
            baseDir: process.env.INPUT_BASE_DIR,
            timeout: parseInt(process.env.INPUT_TIMEOUT),
          });
          
          let services;
          if (process.env.INPUT_SERVICES) {
            services = JSON.parse(process.env.INPUT_SERVICES);
          } else if (process.env.INPUT_SERVICE_URL) {
            services = [{
              name: 'default',
              url: process.env.INPUT_SERVICE_URL
            }];
          } else {
            services = await discovery.discoverServices();
          }
          
          console.log('::set-output name=services::' + JSON.stringify(services));
          return services;
        }
        
        discover().catch(console.error);
        EOL
        
    - name: Run service discovery
      shell: bash
      run: |
        node discover.js
      env:
        INPUT_BASE_DIR: ${{ inputs.base-dir }}
        INPUT_TIMEOUT: ${{ inputs.timeout }}
        INPUT_SERVICES: ${{ inputs.services }}
        INPUT_SERVICE_URL: ${{ inputs.service-url }}
        
    - name: Generate screenshot script
      shell: bash
      run: |
        cat > screenshot.js << 'EOL'
        const ScreenshotService = require('./src/screenshot-service');
        
        async function takeScreenshots() {
          const viewports = JSON.parse(process.env.INPUT_VIEWPORTS);
          const services = JSON.parse(process.env.SERVICES);
          
          const screenshotService = new ScreenshotService({
            outputDir: process.env.INPUT_SCREENSHOT_DIR,
            viewports,
            forceRefresh: process.env.INPUT_FORCE_REFRESH === 'true'
          });
          
          const screenshots = await screenshotService.takeScreenshots(services);
          console.log('::set-output name=screenshots::' + JSON.stringify(screenshots));
          
          if (process.env.INPUT_GENERATE_METADATA === 'true') {
            await screenshotService.generateMetadata();
            console.log('::set-output name=metadata-path::' + process.env.INPUT_SCREENSHOT_DIR + '/metadata.json');
          }
        }
        
        takeScreenshots().catch(console.error);
        EOL
        
    - name: Take screenshots
      shell: bash
      run: |
        node screenshot.js
      env:
        INPUT_SCREENSHOT_DIR: ${{ inputs.screenshot-dir }}
        INPUT_VIEWPORTS: ${{ inputs.viewports }}
        INPUT_FORCE_REFRESH: ${{ inputs.force-refresh }}
        INPUT_GENERATE_METADATA: ${{ inputs.generate-metadata }}
        SERVICES: ${{ steps.discover.outputs.services }}
        
    - name: Commit screenshots
      if: inputs.commit-screenshots == 'true'
      shell: bash
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        git add ${{ inputs.screenshot-dir }}
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update screenshots [skip ci]
          
          Automated screenshot update via dockerfile-service-discovery action"
          git push
        fi